# Generated by Django 5.2.6 on 2025-09-30 01:03

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_create_questions_schema'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'db_table': 'questions"."category',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('original_img', models.TextField(blank=True, null=True)),
                ('separate_img', models.TextField(blank=True, null=True)),
                ('difficulty', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('problem', models.TextField()),
                ('choices', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('description', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('answer', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(db_column='category', on_delete=django.db.models.deletion.PROTECT, related_name='questions', to='core.category')),
            ],
            options={
                'db_table': 'questions"."list',
                'constraints': [models.CheckConstraint(condition=models.Q(('difficulty__gte', 0), ('difficulty__lte', 100)), name='difficulty_0_100')],
            },
        ),
    ]

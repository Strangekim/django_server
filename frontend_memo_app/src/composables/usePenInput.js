/**
 * Ìéú ÏûÖÎ†• Í∞êÏßÄ Composable
 * Ìè¨Ïù∏ÌÑ∞/ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ÏóêÏÑú ÏûÖÎ†• ÌÉÄÏûÖ Í∞êÏßÄ Î∞è Ìéú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
 */

import { ref } from 'vue'

export function usePenInput(sessionData) {
  // ÎîîÎ≤ÑÍ∑∏ Î™®Îìú (URL ÌååÎùºÎØ∏ÌÑ∞ ?debug=pen ÏúºÎ°ú ÌôúÏÑ±Ìôî)
  const isDebugMode = ref(false)
  if (typeof window !== 'undefined') {
    const urlParams = new URLSearchParams(window.location.search)
    isDebugMode.value = urlParams.get('debug') === 'pen'
    if (isDebugMode.value) {
      console.log('üîç [PEN DEBUG] ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±ÌôîÎê®')
    }
  }

  /**
   * ÏûÖÎ†• Î∞©Ïãù Í∞êÏßÄ Ìï®Ïàò (Îã§Ï∏µ Ìè¥Î∞±)
   * @param {Event} event - Ïù¥Î≤§Ìä∏ Í∞ùÏ≤¥
   * @returns {string} 'pen' | 'touch' | 'mouse' | 'finger' | 'unknown'
   */
  function detectInputType(event) {
    // 1. Pointer EventsÍ∞Ä Í∞ÄÏû• Ï†ïÌôïÌïòÎØÄÎ°ú Ïö∞ÏÑ† Ï≤òÎ¶¨
    if ('pointerType' in event && event.pointerType) {
      const type = event.pointerType // 'pen' | 'touch' | 'mouse'
      if (isDebugMode.value) {
        console.log(`üîç [PEN DEBUG] pointerType Í∞êÏßÄ: ${type}`)
      }
      return type
    }

    // 2. ÏïïÎ†• Îç∞Ïù¥ÌÑ∞Î°ú Ìéú Í∞êÏßÄ
    if (event.pressure !== undefined && event.pressure !== null) {
      if (event.pressure > 0 && event.pressure !== 0.5) {
        if (isDebugMode.value) {
          console.log(`üîç [PEN DEBUG] pressureÎ°ú Ìéú Í∞êÏßÄ: ${event.pressure}`)
        }
        return 'pen'
      } else if (event.pressure === 0.5) {
        return 'mouse'
      }
    }

    // 3. Í∏∞Ïö∏Í∏∞ Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ìéú (0 Í∞íÎèÑ Ïú†Ìö®)
    if (event.tiltX !== undefined || event.tiltY !== undefined) {
      if (isDebugMode.value) {
        console.log(`üîç [PEN DEBUG] tiltÎ°ú Ìéú Í∞êÏßÄ: tiltX=${event.tiltX}, tiltY=${event.tiltY}`)
      }
      return 'pen'
    }

    // 4. Touch Ìè¥Î∞± (iOS)
    if ('changedTouches' in event && event.changedTouches?.length) {
      const touch = event.changedTouches[0]

      // iOS WebKit: Apple PencilÏù¥Î©¥ 'stylus'Í∞Ä Ïò¨ Ïàò ÏûàÏùå
      if ('touchType' in touch && touch.touchType === 'stylus') {
        return 'pen'
      }

      // ÏïïÎ†•Ïù¥ÎÇò Í∞ÅÎèÑ Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ìéú
      const hasForce = typeof touch.force === 'number' && touch.force > 0.1
      const hasTilt = typeof touch.altitudeAngle === 'number' || typeof touch.azimuthAngle === 'number'
      const hasPressure = typeof touch.pressure === 'number' && touch.pressure > 0.1

      if (hasForce || hasTilt || hasPressure) {
        return 'pen'
      }

      return 'finger'
    }

    // 5. Îã®Ïùº ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ (touches Î∞∞Ïó¥ ÏÇ¨Ïö©)
    if (event.type.includes('touch') && event.touches?.length) {
      // Îã§Ï§ë ÌÑ∞ÏπòÎäî Ìï≠ÏÉÅ ÏÜêÍ∞ÄÎùΩ
      if (event.touches.length > 1) {
        return 'finger'
      }

      const touch = event.touches[0]

      // iOS WebKit ÏßÄÏõê
      if ('touchType' in touch && touch.touchType === 'stylus') {
        return 'pen'
      }

      // ÏïïÎ†•/Í∞ÅÎèÑ Í∏∞Î∞ò Í∞êÏßÄ
      const hasForce = typeof touch.force === 'number' && touch.force > 0.1
      const hasTilt = typeof touch.altitudeAngle === 'number' || typeof touch.azimuthAngle === 'number'

      if (hasForce || hasTilt) {
        return 'pen'
      }

      return 'finger'
    }

    // 6. Mouse Ìè¥Î∞±
    if (event.type === 'mousedown' || event.type === 'mousemove' || event.type === 'mouseup') {
      return 'mouse'
    }

    return 'unknown'
  }

  /**
   * Ïù¥Î≤§Ìä∏ÏóêÏÑú Ìéú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
   * @param {Event} event - Ïù¥Î≤§Ìä∏ Í∞ùÏ≤¥
   * @param {Function} getCoordinates - Ï¢åÌëú Î≥ÄÌôò Ìï®Ïàò
   * @param {string} currentTool - ÌòÑÏû¨ ÎèÑÍµ¨
   * @param {string} currentColor - ÌòÑÏû¨ ÏÉâÏÉÅ
   * @param {number} strokeWidth - ÌòÑÏû¨ ÏÑ† ÍµµÍ∏∞
   * @returns {object} Ï∂îÏ∂úÎêú Ìéú Îç∞Ïù¥ÌÑ∞
   */
  function extractEventData(event, getCoordinates, currentTool, currentColor, strokeWidth) {
    const coords = getCoordinates(event)
    const timestamp = Date.now() - sessionData.value.startTime
    const inputType = detectInputType(event)

    // Ìè¨Ïù∏ÌÑ∞ Ïù¥Î≤§Ìä∏ÏóêÏÑú ÏïïÎ†•, Í∏∞Ïö∏Í∏∞, ÎπÑÌãÄÍ∏∞ Ï†ïÎ≥¥ Ï∂îÏ∂ú
    let pressure = null
    let tiltX = 0
    let tiltY = 0
    let twist = 0

    // ÏïïÎ†• ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë (Ï°∞Í±¥ ÏôÑÌôî - inputType Ï≤¥ÌÅ¨ Ï†úÍ±∞)
    if (event.pressure !== undefined && event.pressure !== null) {
      if (event.pressure > 0) {
        pressure = event.pressure
        sessionData.value.capabilities.pressure = true
      }
    }

    // Ìã∏Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë (Í∞úÏÑ†Îê® - 0 Í∞íÎèÑ Ïú†Ìö®)
    if (event.tiltX !== undefined && event.tiltX !== null) {
      tiltX = event.tiltX
      sessionData.value.capabilities.tilt = true
    }
    if (event.tiltY !== undefined && event.tiltY !== null) {
      tiltY = event.tiltY
      sessionData.value.capabilities.tilt = true
    }

    // Twist Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    if (event.twist !== undefined && event.twist !== null) {
      twist = event.twist
      sessionData.value.capabilities.twist = true
    }

    // ÎîîÎ≤ÑÍ∑∏ Î™®Îìú: Ìè¨Ïù∏ÌÑ∞ Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
    if (isDebugMode.value && (inputType === 'pen' || pressure > 0)) {
      console.log(`üîç [PEN DEBUG] inputType=${inputType}, pressure=${pressure}, tiltX=${tiltX}, tiltY=${tiltY}, twist=${twist}`)
    }

    return {
      timestamp,
      x: coords.x,
      y: coords.y,
      pressure,
      tiltX,
      tiltY,
      twist,
      eventType: event.type,
      inputType,
      tool: currentTool,
      color: currentColor,
      strokeWidth
    }
  }

  /**
   * Coalesced Events Ï∂îÏ∂ú Ìï®Ïàò (Í≥†Ï£ºÌååÏàò Îç∞Ïù¥ÌÑ∞ ÏàòÏßë)
   * @param {Event} event - Ìè¨Ïù∏ÌÑ∞ Ïù¥Î≤§Ìä∏
   * @param {Function} getCoordinates - Ï¢åÌëú Î≥ÄÌôò Ìï®Ïàò
   * @param {string} currentTool - ÌòÑÏû¨ ÎèÑÍµ¨
   * @param {string} currentColor - ÌòÑÏû¨ ÏÉâÏÉÅ
   * @param {number} strokeWidth - ÌòÑÏû¨ ÏÑ† ÍµµÍ∏∞
   * @returns {Array|null} Ï∂îÏ∂úÎêú coalesced events Î∞∞Ïó¥ ÎòêÎäî null
   */
  function extractCoalescedEvents(event, getCoordinates, currentTool, currentColor, strokeWidth) {
    // getCoalescedEvents() ÏßÄÏõê ÌôïÏù∏
    if (!event.getCoalescedEvents || typeof event.getCoalescedEvents !== 'function') {
      return null
    }

    try {
      const coalescedEvents = event.getCoalescedEvents()

      // coalesced eventsÍ∞Ä ÏûàÏúºÎ©¥ capabilities ÏóÖÎç∞Ïù¥Ìä∏
      if (coalescedEvents && coalescedEvents.length > 0) {
        sessionData.value.capabilities.coalesced = true

        if (isDebugMode.value) {
          console.log(`üîç [PEN DEBUG] Coalesced events: ${coalescedEvents.length}Í∞ú`)
        }

        // Í∞Å coalesced eventÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
        return coalescedEvents.map(e => extractEventData(e, getCoordinates, currentTool, currentColor, strokeWidth))
      }
    } catch (err) {
      if (isDebugMode.value) {
        console.warn(`‚ö†Ô∏è [PEN DEBUG] Coalesced events Ï∂îÏ∂ú Ïã§Ìå®:`, err)
      }
    }

    return null
  }

  return {
    isDebugMode,
    detectInputType,
    extractEventData,
    extractCoalescedEvents
  }
}
